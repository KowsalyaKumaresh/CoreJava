package com.chainsys.reflection;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class ListClassMembers {
                 
	public static void main(String args[])
	  {
		  testA();
	  
		 String classname="com.chainsys.reflection.Actor";
		 Class<?> actorclass = null;
		 try {
			actorclass=Class.forName(classname); // Actor actorclass=null;
		 } catch (ClassNotFoundException e1) 
		 {
			e1.printStackTrace();
		 } 
		 Object obj = null;
		 try {
			//obj=actorclass.newInstance(); // new Actor();
				obj = actorclass.getDeclaredConstructors()[0].newInstance();
			} catch (IllegalArgumentException e) {
				e.printStackTrace();
			} catch (InvocationTargetException e) {
				e.printStackTrace();
			} catch (SecurityException e) {
				e.printStackTrace();
			}catch (InstantiationException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			}
		 
		 printClassInfo(obj);
	}
	
	public static void printClassInfo(Object ob)
	  {
		  Class<?> classreflected= ob.getClass();
		 System.out.println(classreflected.getName());
		 System.out.println("Constructors:");
	     Constructor<?> constructorlist[] = classreflected.getConstructors();
	     for(int i = 0; i < constructorlist.length; i++)
	     {
	       System.out.println("\t" + constructorlist[i]);
	     }
	     //
	     System.out.println("Methods:");
	     Method methodlist[] = classreflected.getMethods();
	  //   for(int i = 0; i < m
	for(int i = 0; i < methodlist.length; i++)
	     {
	   	  methodlist[i].setAccessible(true);
	       System.out.println("\t Method Name: " + methodlist[i].getName()+
	       		" ParameterCount "+ methodlist[i].getParameterCount()+
	       		" returnType "+ methodlist[i].getReturnType());
	     }
	  }
	
	public static void testA() {
		String s1="Hello";
		//Class<?> stringclass=s1.getClass();
		printClassInfo(s1);
		Integer x=2000;
		//Class<?> intClass=x.getClass();
		printClassInfo(x);
		Emp firstEmp=new Emp();
		//Class<?> empClass=firstEmp.getClass();
		printClassInfo(firstEmp);
		Actor hero=new Actor();
		printClassInfo(hero);}}
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
	

